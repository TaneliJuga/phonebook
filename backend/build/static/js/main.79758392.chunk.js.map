{"version":3,"sources":["phonebook/components/InputWithLabel.js","phonebook/Contact.js","phonebook/components/UpdateForm.js","phonebook/components/ContactTable.js","phonebook/PhonebookApp.js","index.js"],"names":["Component","name","onChange","type","rest","inputAttributes","id","className","htmlFor","getTextValue","value","event","target","inputs","map","stateAttribute","initialValue","getValue","fields","key","initialState","reduce","obj","input","UpdateForm","selectedContacts","updateContact","onSuccessfullUpdate","allContacts","state","contact","initState","useState","values","setValues","update","copy","forEach","copyContact","then","result","setState","e","oldValue","onSubmit","preventDefault","Object","entries","attributes","InputWithLabel","TableActionButton","text","disabled","length","RemoveButton","removeContact","onClick","UpdateButton","props","ContactTable","contacts","selectedRows","setSelectedRows","showUpdateForm","setShowUpdateForm","find","filter","undefined","formatHeader","first","slice","toUpperCase","toLowerCase","getRowClickHandler","index","indexOf","splice","buttonText","showForm","ContactForm","addContact","App","setContacts","updateContacts","axios","get","response","data","useEffect","delete","console","log","put","post","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.79758392.chunk.js","sourcesContent":["import {React, useState, useEffect} from 'react'\r\nimport '../phonebook.css'\r\n\r\nconst Component = ({name, onChange, type, ...rest}) => {\r\n    const inputAttributes = {\r\n        ...rest,\r\n        id: name, \r\n        onChange,\r\n        type\r\n    }\r\n    return (\r\n        <div className={'form-column'}>\r\n            <label htmlFor={name}>{name}</label>\r\n            <input {...inputAttributes}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Component","function getTextValue(value, event){\r\n    return event.target.value;\r\n}\r\n\r\n\r\nconst inputs = [\r\n    [\r\n        'name', \r\n        ['value', ''], \r\n        'text',\r\n        getTextValue\r\n    ],\r\n    [\r\n        'number', \r\n        ['value', ''], \r\n        'text',\r\n        getTextValue\r\n    ]\r\n].map(([name, [stateAttribute, initialValue], type, getValue]) => {\r\n    return {\r\n        name,\r\n        stateAttribute: {\r\n            name: stateAttribute,\r\n            initialValue\r\n        },\r\n        type,\r\n        getValue\r\n    }\r\n})\r\n\r\nconst fields = inputs.map(({name}) => {\r\n    return {\r\n        key: name\r\n    }\r\n})\r\n\r\nfunction getInputs(state, setState){\r\n    return inputs\r\n    .map((input) => {\r\n        const {name, getValue} = input;\r\n        const onChange = (e) => {\r\n            const oldValue = state[name];\r\n            const value = getValue(oldValue, e);\r\n            setState({\r\n                ...state,\r\n                [name]: value\r\n            })\r\n        }\r\n        return {\r\n            ...input,\r\n            onChange\r\n        }\r\n    })\r\n}\r\n\r\nconst initialState = inputs.reduce( (obj, input) => {\r\n    const {name, stateAttribute} = input;\r\n    obj[name] = stateAttribute.initialValue;\r\n    return obj;\r\n}, {})\r\n\r\nexport {inputs, fields, getInputs, initialState}","import {React, useState, useEffect} from 'react'\r\nimport InputWithLabel from './InputWithLabel'\r\nimport '../phonebook.css'\r\nimport {inputs} from '../Contact'\r\n\r\nfunction getInputs(state, setState){\r\n    return inputs\r\n    .map((input) => {\r\n        const {name, getValue} = input;\r\n        const onChange = (e, id) => {\r\n            const oldValue = state[name];\r\n            const value = getValue(oldValue, e);\r\n            const copy = {...state};\r\n            copy[id][name] = value;\r\n            setState(copy);\r\n        }\r\n        return {\r\n            ...input,\r\n            onChange\r\n        }\r\n    })\r\n}\r\n\r\nfunction initState(contact){\r\n    return inputs.reduce( (obj, input) => {\r\n        const {name} = input;\r\n        obj[name] = contact[name];\r\n        return obj;\r\n    }, {})\r\n}\r\n\r\nfunction copyContact(values, contact){\r\n    const copy = {...contact};\r\n    inputs.forEach( ({name}) => {\r\n        copy[name] = values[name];\r\n    })\r\n    return copy;\r\n} \r\n\r\nconst UpdateForm = ({selectedContacts, updateContact, \r\n    onSuccessfullUpdate, allContacts}) => {\r\n    const initialState = selectedContacts.reduce( (state, contact) => {\r\n       state[contact.id] = initState(contact);\r\n       return state; \r\n    }, {});\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    function update(contact){\r\n        const value = values[contact.id];\r\n        const copy = copyContact(value, contact);\r\n        \r\n        updateContact(copy)\r\n        .then(result => {\r\n            onSuccessfullUpdate();\r\n        })\r\n    }\r\n    const inputs = getInputs(values, setValues);\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        selectedContacts.forEach(contact => {\r\n            update(contact);\r\n        })\r\n    }\r\n    return (\r\n        <form onSubmit={onSubmit} className={'update-form'}>\r\n        {\r\n            Object.entries(values).map(([key, value]) => {\r\n                return (\r\n                    <fieldset>\r\n                        {\r\n                            inputs.map(input => {\r\n                                const {name, type, onChange, stateAttribute} = input;\r\n                                const wrapper = (e) =>{\r\n                                    onChange(e, key);\r\n                                }\r\n                                const attributes = {\r\n                                    name,\r\n                                    type,\r\n                                    onChange: wrapper,\r\n                                    [stateAttribute.name]: value[name],\r\n                                    key: name\r\n                                }\r\n                                return (\r\n                                    <InputWithLabel {...attributes}/>\r\n                                )\r\n                            })\r\n                        }\r\n                    </fieldset>\r\n                )\r\n            })\r\n        }\r\n        <button type=\"submit\">save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UpdateForm","import {React, useState} from 'react'\r\nimport UpdateForm from './UpdateForm'\r\nimport {fields} from '../Contact'\r\nimport '../phonebook.css'\r\n\r\n//A button that will be disabled when no contacts are selected\r\nconst TableActionButton = ({selectedContacts, text, ...rest}) => {\r\n    const disabled = selectedContacts.length === 0;\r\n\r\n    return (\r\n        <button {...rest} disabled={disabled}>{text}</button>\r\n    )\r\n}\r\n\r\n\r\nconst RemoveButton = ({selectedContacts, removeContact}) => {\r\n    const onClick = () => {\r\n        selectedContacts.forEach(contact => {\r\n            removeContact(contact);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <TableActionButton \r\n        onClick={onClick}\r\n        selectedContacts={selectedContacts}\r\n        text={'Remove'}/>\r\n    )\r\n}\r\n\r\nconst UpdateButton = ({selectedContacts, text, onClick}) => {\r\n\r\n    const props = {\r\n        selectedContacts,\r\n        text,\r\n        onClick\r\n    }\r\n\r\n    return (\r\n        <TableActionButton {...props}/>\r\n    )\r\n}\r\n\r\nconst ContactTable = ({contacts, removeContact, updateContact}) => {\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const [showUpdateForm, setShowUpdateForm] = useState(false);\r\n    const selectedContacts = selectedRows.map(id => {\r\n        return contacts.find(contact => contact.id == id)\r\n    }).filter(contact => contact !== undefined)\r\n\r\n    function formatHeader(text){\r\n        const first = text.slice(0, 1);\r\n        const rest = text.slice(1);\r\n        return first.toUpperCase() + rest.toLowerCase();\r\n    }\r\n\r\n    function getRowClickHandler(id){\r\n        return () => {\r\n            const index = selectedRows.indexOf(id);\r\n            const isSelected = index !== -1;\r\n\r\n            if(isSelected){\r\n                const copy = selectedRows.slice();\r\n                copy.splice(index, 1);\r\n                setSelectedRows(copy);\r\n            }else{\r\n                setSelectedRows([\r\n                    ...selectedRows,\r\n                    id\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onSuccessfullUpdate = () => {\r\n        setShowUpdateForm(false); \r\n    }\r\n\r\n    const handleUpdateClick = () => {\r\n        setShowUpdateForm(!showUpdateForm); \r\n    }\r\n\r\n    const buttonText = showUpdateForm ? 'cancel' : 'update';\r\n    const canUpdate = selectedContacts.length > 0;\r\n    const showForm = canUpdate && showUpdateForm;\r\n\r\n    return (\r\n    <div>\r\n        <div>\r\n        {\r\n            showForm && (\r\n                <UpdateForm selectedContacts={selectedContacts}\r\n                updateContact={updateContact}\r\n                onSuccessfullUpdate={onSuccessfullUpdate}></UpdateForm>\r\n            )\r\n        }\r\n    </div>\r\n    <div className={'table-container'}>\r\n            <table>\r\n            <caption>Contacts</caption>\r\n          <thead>\r\n            <tr>\r\n              {\r\n                  fields.map(({key}) => {\r\n                      return (\r\n                        <th key={key}>{formatHeader(key)}</th>\r\n                      )\r\n                  })\r\n              }\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n              {\r\n                contacts.map((contact) => {\r\n                    const {id} = contact;\r\n                    const isSelected = selectedRows.indexOf(id) !== -1;\r\n                    const className = isSelected ? 'checked' : '';\r\n                  return (\r\n                  <tr key={id} className={className}\r\n                  onClick={getRowClickHandler(id)}>\r\n                    {\r\n                        fields.map( ({key}) => {\r\n                            return (\r\n                                <td>{contact[key]}</td>\r\n                            )\r\n                        })\r\n                    }\r\n                  </tr>\r\n                  )\r\n                })\r\n              }\r\n          </tbody>\r\n        </table>\r\n        <div className={'actions'}>\r\n            <RemoveButton \r\n                selectedContacts={selectedContacts}\r\n                removeContact={removeContact}\r\n            />\r\n            <UpdateButton \r\n                selectedContacts={selectedContacts}\r\n                onClick={handleUpdateClick} \r\n                text={buttonText} \r\n            />\r\n        </div>\r\n    </div>\r\n    </div>\r\n          )\r\n}\r\n\r\n\r\nexport default ContactTable","import {React, useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport './phonebook.css'\r\nimport InputWithLabel from './components/InputWithLabel'\r\nimport ContactTable from './components/ContactTable'\r\nimport {initialState, getInputs} from './Contact'\r\n\r\nconst ContactForm = ({addContact}) => {\r\n    const [values, setValues] = useState(initialState)\r\n    const inputs = getInputs(values, setValues);\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log(values);\r\n        addContact(values).then(contact => {\r\n            setValues(initialState);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className={'contact-form'}>\r\n        {\r\n            inputs.map(input => {\r\n                const {name, type, onChange, stateAttribute} = input;\r\n                const attributes = {\r\n                    name,\r\n                    type,\r\n                    onChange,\r\n                    [stateAttribute.name]: values[name],\r\n                    key: name\r\n                }\r\n                return (\r\n                    <InputWithLabel {...attributes}/>\r\n                )\r\n            })\r\n        }\r\n        <button type=\"submit\">save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n    const [contacts, setContacts] = useState([]);\r\n    useEffect(() => {\r\n        updateContacts();\r\n    }, [])\r\n\r\n    function updateContacts() {\r\n        axios.\r\n        get('/api/contacts')\r\n        .then(response => {\r\n            setContacts(response.data);\r\n        })\r\n    }\r\n\r\n    const addContact = (contact) => {\r\n        const promise = axios.\r\n        post('/api/contacts', contact)\r\n        .then(response => {\r\n            updateContacts();\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    const removeContact = (contact) => {\r\n        const id = contact.id;\r\n        const promise = axios.\r\n        delete(`/api/contacts/${id}`)\r\n        .then(response => {\r\n            updateContacts();\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    const updateContact = (contact) => {\r\n        console.log('updateContact');\r\n        const {id} = contact;\r\n\r\n        const promise = axios.\r\n        put(`/api/contacts/${id}`, contact)\r\n        .then(response => {\r\n            updateContacts();\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    return  (\r\n        <div>\r\n            <ContactTable \r\n            contacts={contacts} \r\n            removeContact={removeContact}\r\n            updateContact={updateContact}/>\r\n            <h2>Add contact</h2>\r\n            <ContactForm \r\n            addContact={addContact} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import ReactDom from 'react-dom'\r\nimport App from './phonebook/PhonebookApp'\r\n\r\nReactDom.render(\r\n    <App></App>,\r\n    document.getElementById('root'));"],"sourceRoot":""}